#include <stdio.h>
#include <stdlib.h> //NULL

#define ElemType char

//线索存储标志位
//Linkl(0),表示指向左右孩子的指针
//Thread(1),表示指向 前驱后继 的线索 
typedef enum {Link, Thread} PointerTag;
//线索二叉树 
typedef struct BiThrNode 
{
	ElemType data;
	struct BiThrNode* lchild;
	struct BiThrNode* rchild;
	PointerTag ltag;
	PointerTag rtag;
}BiThrNode,*BiThrTree;

//全局变量 ，始终 指向刚刚访问过的结点
BiThrTree pre;
void visit (ElemType x)
{
	printf("%c ",x);
}
//创建线索二叉树  要求用户 先序遍历输入数据
BiThrTree CreateBiThrTree()
{
	BiThrTree T;////
	char c;
	scanf("%c",&c);
	
	if('#' ==c)
	{
		T =NULL;
	}
	else//递归 
	{
		T = (BiThrTree)malloc(sizeof(BiThrNode));
		T->data =c;
		//T->ltag = Link;
	//	T->rtag = Link;
	
		T->lchild = CreateBiThrTree();// 
		T->rchild= CreateBiThrTree();
	}
	return T;
} 
//以节点 T 为根的子树 中序 线索化   
void InThreading  (BiThrTree T)
{
 	if(T)
 	{
 		InThreading(T->lchild);//递归左孩子线索化
 		
 		if(!T->lchild)// 如果该结点没有左孩子 ，把lchild 指向刚刚访问过的结点 
 		{
 			T->ltag = Thread ;// 1
 			T->lchild = pre;
		}else 
		T->ltag=Link;
		
		if(!pre->rchild)
		{
			pre->rtag = Thread;
			pre->rchild =T;
		} 
		else
		pre->rtag=Link;
		
		pre = T;
		InThreading(T->rchild); //递归右孩子线索化 
	}
} 
//带头结点的二叉树中序线索化 
BiThrTree InOrderThreading(BiThrTree T)//pre
{
  //中序线索二叉树头节点   （非根结点） 
	BiThrTree ThrHead = (BiThrTree)malloc(sizeof(BiThrNode));
	ThrHead->rtag = Thread;
	ThrHead->rchild = ThrHead;
	ThrHead->ltag = Link;
	
	if(!T)
	{
		ThrHead->lchild = ThrHead;
	}
	else
	{
		ThrHead->lchild = T;
		pre = ThrHead; 
		InThreading(T);
		pre->rchild=ThrHead;//
		pre->rtag=Thread;//
		ThrHead->rchild = pre;//
	}
	return ThrHead;
	
}
//遍历 
void ThrInOrderTraverse(BiThrTree ThrHead)
{
    BiThrTree temp = ThrHead->lchild; // 让temp指向根节点

    while (temp != ThrHead) {
        while (temp->ltag == 0) {
            temp = temp->lchild; // 向左走到尽头
        }
        visit(temp->data);
        // 若当前节点无右子树且后继不是头节点，则输出后继的值
        while (temp->rtag == Thread && temp->rchild != ThrHead) {
            temp = temp->rchild;
            visit(temp->data);
        }
        temp = temp->rchild; // 遍历右子树
    }
}

int main()
{
	BiThrTree root;

    printf("请按 先序 顺序输入节点值，输入‘#’代表节点为空：\n");
    root = CreateBiThrTree();
    BiThrTree ThrHead = InOrderThreading(root);
    ThrInOrderTraverse(ThrHead);

    return 0;
	
}