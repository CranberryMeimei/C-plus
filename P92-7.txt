#include <stdio.h>
#include <stdlib.h> //NULL
#define ElemType char

//二叉链表 
typedef struct BiTNode 
{
	ElemType data;
	struct BiTNode* lchild;
	struct BiTNode* rchild;
}BiNode,*BiTree;

//访问二叉树 
void visit( BiTree p )
{
	printf("%c\t",p->data);
}
 
//创建线索二叉树  要求用户 先序遍历输入数据
BiTree CreateBiTree()
{
	BiTree T;////
	char c;
	scanf("%c",&c);
	
	if('#' ==c)
	{
		T =NULL;
	}
	else//递归 
	{
		T = (BiTree)malloc(sizeof(BiNode));
		T->data =c;
	
		T->lchild = CreateBiTree();// 
		T->rchild= CreateBiTree();
	}
	return T;
}

void InOrdering ( BiTree T )
{
	if(T)
	{
		InOrdering ( T->lchild );
		visit( T);
		InOrdering ( T->rchild );
	}
}
//最长路径
int LongestPath (BiTree T )
{
	if(T==NULL)return 0;
//	if(T->lchild==NULL&&T->rchild==NULL)  return 1;//
	
	int L = LongestPath (T->lchild);
	int R =  LongestPath (T->rchild);
	return (L>R?L:R)+1;
}
//最长路径 输出 
void Max_Length ( BiTree T )
{
	if(T==NULL)  return ;
	else
	{
		visit(T);
		int  L = LongestPath (T->lchild );
		int R = LongestPath (T->rchild );
		if(L>=R) Max_Length (T->lchild );
		else Max_Length ( T->rchild );
	}
}
int main()
{
	printf("请按 先序 顺序输入节点值，输入‘#’代表节点为空：\n");
    BiTree root = CreateBiTree();
    printf("\n");
    Max_Length ( root );
    int max =LongestPath ( root );
    printf("max length = %d\n",max-1);
}